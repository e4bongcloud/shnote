<1. 요구사항 확인>

*객체지향 설계 원칙 : SOLID
- 하나의 클래스가 제공하는 모든 서비스는 하나의 책임을 수행하는 데 집중되어야 한다는 원칙
- SW의 각 구성요소는 확장에는 열려있고 변경에는 닫혀있어야 한다는 원칙
- 하위 클래스는 언제라도 상위 클래스로 교체할 수 있어야 한다는 원칙
- 객체 설계 시 특정 기능에 대한 인터페이스는 그 기능과 상관없는 부분이 변해도 영향을 받지 않아야 한다는 원칙
- 추상을 매개로 메시지를 주고받음으로써 관계를 최대한 느슨하게 만드는 원칙




-> 단일 책임의 원칙(SRP), 개방 폐쇄의 원칙(OCP), 리스코프 치환의 원칙(LSP), 인터페이스 분리의 원칙(ISP), 의존성 역전의 원칙(DIP)



*럼바우 데이터 모델링 방법론 : 객동기
- 객체 다이어그램을 활용하여 표현
- 객체들 사이에 제어 흐름, 동작 순서 등 동적인 행위를 표현하는 모델링, 상태 다이어그램을 활용하여 표현
- 자료 흐름을 중심으로 처리 과정을 표현하는 모델링, 자료흐름도(DFD)을 활용하여 표현




-> 객체 모델링(Object/Information), 동적 모델링(Dynamic), 기능 모델링(Functional)



*생성 디자인 패턴 : 추빌팩프싱, 인스턴스 생성 방식을 구조화하는데 유용한 패턴
- 서로 연관되거나 의존적인 객체들의 조합을 만드는 인터페이스를 제공, 구현부에 신경쓰지 않고 인터페이스(API)만 생각
- 복잡한 인스턴스를 조립해 만드는 구조, 전체를 구성하는 각 부분을 만들면서 단계를 밟아가며 만들어 나간다
- 상위 클래스에서 인터페이스 정의, 하위클래스에서 인스턴스 생성, 객체 생성을 서브 클래스(SUB-CLASS)에 위임하는 패턴
- 처음부터 일반적인 원형을 만들어 놓고, 그것을 복사한 후 필요한 부분만 수정해 사용하는 패턴, 기존 객체를 복사함으로써 객체를 생성하는 패턴
- 전역 변수 사용하지 않고 객체 하나만 생성, 그 객체는 어디서든지 참조할 수 있음, 인스턴스가 한 개밖에 존재하지 않는 것을 보증하는 패턴




-> 추상팩토리, 빌더, 팩토리 메서드, 싱글톤



*구조 디자인 패턴 : abcd ffp, 더 큰 구조를 형성하는데 유용한 패턴
- 기존에 생성된 클래스를 재사용할 수 있도록 중간에서 맞춰주는 역할을 하는 인터페이스를 만드는 패턴
- 기능의 클래스 계층과 구현의 클래스 계층을 연결하는 패턴
- 객체들의 관계를 트리 구조로 구성하여 부분-전체 계층을 표현하는 패턴
- 기존에 구현되어 있는 클래스에 필요한 기능을 추가해 나가는 설계 패턴
- 복잡한 시스템에 대해 단순한 인터페이스 제공, 시스템 구조에 대한 파악을 쉽게 하는데 유용한 패턴
- 모든 객체가 갖는 본질적인 요소를 클래스화 하여 메모리를 절약, '클래스의 경량화'목적인 패턴
- 실체 객체에 대한 대리 객체를 제공하여 특정 객체로의 접근을 제어하고 정보은닉의 역할을 수행할 수 있는 패턴




-> adapter, bridge, composite, decorator, facade, flyweight, proxy



*행위 디자인 패턴 : MS OS는 ICT의 메인(Me In) VCR이다, 클래스 간 상호작용과 역할 분담을 체계화 하는데 유용한 패턴
- 중재자 객체를 통해서만 객체 간 통신을 하여 객체간 결합도를 낮추는 패턴
- 객체 내부의 상태에 따라 행위 내용을 변경하는 패턴
- 한 객체의 상태가 바뀌면 그 객체에 의존하는 다른 객체들에 연락
- 알고리즘을 하나의 클래스로 캡슐화하여 동적으로 객체의 행위를 자유롭게 변환하는 패턴
- 컬렉션의 구현 방법(리스트, 스택, 트리 등)을 노출시키지 않으면서도 반복자를 사용하여 컬렉션의 요소들을 순회할 수 있게 하는 패턴
- 명령이 들어오면 그에 맞는 서브 클래스가 선택되어 실행되는 패턴
- 상위 클래스-추상 메서드, 하위 클래스-구체화(오버라이딩)
- Undo(작업취소) 기능을 개발할 때 사용하는 디자인 패턴
- 다양한 언어 구문을 해석할 수 있게 만드는 디자인 패턴, 구문의 해석을 맡는 클래스를 각각 작성
- 처리 기능을 담당하는 클래스의 메서드가 각 클래스를 돌아다니며 특정 작업을 수행
- 정적으로 어떤 기능에 대한 처리의 연결이 하드 코딩 되어 있을 때, 이를 동적으로 연결되어 있는 경우에 따라 다르게 처리될 수 있도록 연결한 디자인




-> Mediator, State, Observer, Strategy, Iterator, Command, Template Method, Memento, Interpreter, Visitor, Chain of Responsibility




<2. 화면 설계>

*UML(Unified Modeling Language) 다이어그램
정적/구조적(Structural) 다이어그램 : 클객컴배복패
- 클래스의 속성 및 연산과 클래스 간 정적인 관계를 표현한 다이어그램
- 클래스와 연관된 모든 인스턴스를 표현하는 다이어그램
- 컴포넌트와 그들 사이 의존 관계를 나타내는 다이어그램
- 컴포넌트 사이의 종속성과 시스템의 물리적인 구조를 표현하는 다이어그램
- 복합 구조를 갖는 경우 그 내부 구조를 표현한 다이어그램
- 패키지들의 관계를 표현한 다이어그램




-> 클래스, 객체, 컴포넌트, 배치, 복합체구조, 패키지


동적/행위적(Behavioral) 다이어그램 : 유시커상활타
- 시스템의 기능과 외부 요소를 사용자의 관점에서 표현한 다이어그램
- 시간적 개념을 중심으로 메시지 흐름으로 표현하는 다이어그램
- 객체들이 주고받는 메시지와 객체 간의 연관까지 표현하는 다이어그램
- 하나의 객체의 상태가 어떻게 변화하는지를 표현하는 다이어그램
- 처리 로직이나 조건 등 시스템 전체의 프로세스 흐름을 순서대로 표현하는 다이어그램
- 시간 제약을 명시적으로 표현하는 다이어그램




-> 유스케이스, 시퀀스, 커뮤니케이션, 상태, 활동, 타이밍




<3. 데이터 입출력 구현>

*데이터 모델 표시 요소 : 연구제




-> 연산, 구조, 제약조건



*데이터 모델링 절차 : 요개논물




-> 요구사항 분석-> 개념적 모델링(ERD)-> 논리적 모델링(릴레이션 설계)-> 물리적 모델링(성능 최적화, 반정규화)



*논리 데이터 모델링 속성 : 개속관



-> 개체, 속성, 관계



*정규화 : 도부이결다조
- 1NF : 도메인이 원자값
- 2NF : 부분함수 종속 제거
- 3NF : 이행함수 종속 제거( A→ B , B→C 이면 A→C)
- BCNF : 결정자 후보 키가 아닌 함수 종속 제거
- 4NF : 다치(다중 값) 종속 제거
- 5NF : 조인 종속 제거



*이상현상 : 삽삭갱
- 튜플 삽입 시 특정 속성에 해당하는 값이 없어 삽입하지 못하거나 NULL 값을 입력해야 하는 현상
- 튜플 삭제 시 원치 않는 다른 정보까지 연쇄적으로 삭제되는 현상
- 튜플 수정 시 일부의 튜플만 갱신되어 데이터의 일관성에 문제가 생기는 현상



-> 삽입이상, 삭제이상, 갱신이상



*데이터베이스 무결성: 참키개속사
- 외래키의 값은 참조하는 개체(릴레이션)의 기본키값이나 NULL만 들어가야한다.
- 한 릴레이션에 같은 키 값을 가진 튜플은 없어야 한다.
- 기본키에는 NULL이 없어야 한다.
- 속성에 도메인을 벗어난 값이 들어가선 안된다.
- 기타 사용자가 요구하는 제약조건을 만족하여야 한다.




-> 참조 무결성, 키 무결성, 개체 무결성, 속성 무결성, 사용자 정의 무결성



*키(식별자) 특성
- 유일성 : 모든 튜플들을 유일하게 식별할 수 있는가
- 최소성 : 최소한의 속성으로 구성되었는가
- 대표성 : 릴레이션을 대표하는가
- 불변성 : 자주 변경되지 않는가



*키(식별자) 종류
- 유일성과 최소성을 만족하는 키
- 유일성, 최소성, 대표성, 불변성을 모두 만족하는 키
- 후보키 중에서 기본키로 선택되지 않은 키
- 유일성은 만족하지만 최소성은 만족하지 못하는 키
- 다른 릴레이션의 기본키



-> 후보키, 기본키, 대체키, 슈퍼키, 외래키



*데이터베이스 정의 : 공장통운
- 여러 애플리케이션, 시스템들이 공동으로 사용하는 데이터
- 저장 매체에 저장된 데이터
- 중복이 최소화된 데이터의 모임
- 조직의 업무를 수행하는 데 필요한 데이터



-> 공유 데이터, 저장된 데이터, 통합된 데이터, 운영 데이터




<4. 통합 구현>

*서로 다른 플랫폼 및 애플리케이션들 간의 정보 전달, 연계, 통합을 가능하게 해주는 솔루션




-> EAI



*EAI 구축 유형 : 포 허 메 하




-> Point to Point, Hub & Spoke, Message Bus, Hybrid



<7. SQL 응용>

*CREATE
CREATE VIEW 뷰 AS SELECT ... ;
CREATE OR REPLACE VIEW 뷰 AS SELECT ... ;
CREATE INDEX 인덱스 ON 테이블(컬럼1, 컬럼2, ...);
CREATE TABLE 테이블
{
  컬럼 데이터타입 제약조건,
  ...
};



*ALTER
ALTER 테이블 ADD 컬럼 데이터타입 제약조건;
ALTER 테이블 MODIFY 컬럼 데이터타입 제약조건;
ALTER 테이블 DROP COLUMN 컬럼;
ALTER INDEX 인덱스 ON 테이블(컬럼1, 컬럼2, ...);



*DROP
DROP TABLE 테이블 [CASCADE | RESTRICT];
DROP VIEW 뷰;
DROP INDEX 인덱스;



*TRUNCATE : 테이블 구조는 놔두고 튜플들만 전부 삭제
TRUNCATE TABLE 테이블;



*SELECT
SELECT [DISTINCT] 컬럼1, 컬럼2, ... 
FROM 테이블1, 테이블2, ...
[WHERE 조건]
[GROUP BY 컬럼1, 컬럼2, ...]
[HAVING 그룹조건]
[ORDER BY 컬럼1 [DESC]];



*INSERT
INSERT INTO 테이블(컬럼1, 컬럼2, ...)
VALUES (값1, 값2, ...);



*UPDATE
UPDATE 테이블
SET 컬럼1 = 값1, 컬럼2 = 값2, ...
WHERE 조건; (주로 PK='데이터' 형태로 UPDATE 될 튜플을 지정)



*DELETE
DELETE FROM 테이블 WHERE 조건;



*WHERE 조건절
WHERE 컬럼 BETWEEN 1 AND 2	
WHERE 컬럼 IN (1, 2, ...)
WHERE 컬럼 NOT IN (1, 2, ...)
WHERE 컬럼 LIKE '[abcd]%'
WHERE 컬럼 IS NULL
WHERE 컬럼 IS NOT NULL



*WHERE절 서브쿼리 다중행 연산자
IN : 메인쿼리의 비교 조건이 서브쿼리의 결과 중에서 하나라도 일치하면 참
ANY, SOME : 서브쿼리에 의해 리턴되는 하나하나의 값과 조건을 비교하여 하나 이상 만족하면 참
ALL : 메인쿼리의 비교 조건이 서브쿼리의 결과와 모든 값이 일치하면 참
EXISTS : 메인쿼리의 비교 조건이 서브쿼리의 결과 중에서 만족하는 값이 하나라도 존재하면 참



*집계함수
COUNT()
SUM()
AVG()
MAX()
MIN()



*집계함수 사용 예시
SELECT 직책, 부서, SUM(급여) AS 급여합계
FROM 급여
GROUP BY 직책, 부서
HAVING 급여합계 > 5000;

-> 해석: 직책&부서로 그룹을 묶었을 때 급여합계가 5000 초과인 튜플의 직책, 부서 급여합계를 조회



*조인
SELECT A.컬럼1, B.컬럼1, ...
FROM 테이블1 A 
[INNER | LEFT | RIGHT | FULL] JOIN 테이블2 B 
ON 조인조건
[WHERE 검색조건];



*집합연산
SELECT 컬럼1 FROM 테이블1 WHERE 조건절
[UNION | UNION ALL | INTERSECT | MINUS]
SELECT 컬럼2 FROM 테이블2 WHERE 조건절


*GRANT, REVOKE
GRANT 권한 ON 테이블 TO 사용자;
REVOKE 권한 ON 테이블 FROM 사용자;




<8. 서버 프로그램 구현>

*형상관리도구

공유 폴더 방식 : 매일 개발이 완료된 파일은 약속된 위치의 공유 폴더에 복사
- RCS : 소스 파일의 수정을 한 사람만으로 제한
- SCCS

클라이언트 / 서버 방식 : 중앙에 버전 관리 시스템을 항시 동작
- CVS : 다수 인원 동시에 운영체제 접근 가능
- SVN : 하나의 서버에서 소스를 쉽고 유용하게 관리할 수 있게 해줌
- Bitkeeper : SVN과 비슷, 대규모 프로젝트에서 빠른 속도 내도록 개발된 형상 관리 도구

분산 저장소 방식 : 로컬/원격 저장소로 분리되어 분산 저장
- Git : commit, push



*소프트웨어 모듈 응집도 : 우논시절 통순기, 높을수록 SW 품질 좋음
- 모듈 내부의 각 구성 요소가 연관이 없을 경우
- 유사한 성격, 특정 형태로 분류되는 처리 요소들이 한 모듈에서 처리되는 경우
- 특정 시간에 처리되어야 하는 활동들을 한 모듈에서 처리할 경우
- 모듈이 다수의 관련 기능을 가질 때 모듈 안의 구성 요소들이 그 기능을 순차적으로 수행할 경우
- 동일한 입출력을 사용하여 다른 기능을 수행하는 활동들이 모여있는 경우
- 한 활동으로부터 나온 출력 값을 다른 활동이 사용할 경우
- 모듈 내부 모든 기능이 단일한 목적을 위해 수행되는 경우




-> 우연적(Coincidental), 논리적(Logical), 시간적(Temporal), 절차적(Procedure), 통신적(Communicational), 순차적(Sequential), 기능적(Functional) 응집도(Cohesion), 순서대로 높음



*소프트웨어 모듈 결합도 : 내공 외제 스자, 낮을수록 SW 품질 좋음
- 다른 모듈 내부에 있는 변수나 기능을 다른 모듈에서 사용하는 경우
- 파라미터가 아닌 모듈 밖에 선언되어 있는 전역 변수를 참조하고 갱신하는 식으로 상호작용하는 경우
- 두 개의 모듈이 외부에서 도입된 인터페이스를 공유할 경우
- 단순 처리할 대상인 값만 전달되는게 아니라 어떻게 처리를 해야 한다는 제어 요소가 전달되는 경우
- 인터페이스로 배열, 객체, 구조 등이 전달되는 경우
- 파라미터를 통해서만 상호작용이 일어나는 경우




-> 내용(Content), 공통(Common), 외부(External), 제어(Control), 스탬프(Stamp), 자료(Data) 결합도(Coupling), 순서대로 낮음



*공통 모듈 단위 테스트 도구 
- xUnit : jUnit, CppUnit, HttpUnit





<10. 어플리케이션 테스트 관리>
*소프트웨어 테스트 원리
- 개발 초기에 테스팅 하지 않으면 비용이 커진다는 법칙
- 오류의 80%는 전체 모듈의 20% 안에서 발견된다는 법칙
- 동일한 테스트 케이스에 의한 반복적 테스트는 새로운 버그를 찾지 못함




-> 요르돈의 법칙(눈덩이 법칙), 파레토 법칙, 살충제 패러독스



*테스트 목저에 따른 분류 : 회안성 구회병
- 시스템에 고의로 실패를 유도하고, 시스템의 정상적 복귀 여부를 테스트
- 소스 내 보안적인 결함을 미리 점검하는 테스트
- 응답 시간, 반응 속도, 처리량 등을 측정하는 테스트
- 시스템의 내부 논리 경로, 소스 코드의 복잡도를 테스트
- 오류제거와 수정에 의해 새로 유입된 오류가 없는 지 확인하는 일종의 반복 테스트 기법
- 변경된 시스템과 기존 시스템에 동일한 데이터 입력 후 결과를 비교하는 테스트



-> 회복(Recovery), 안전(Security), 성능(Performance), 구조(Structure), 회귀(Regression), 병행(Parallel) 테스트



*정적 테스트 : 프로그램을 실행하지 않고 분석 및 검증 하는 테스트
- 리뷰 : 인스펙션(동료검토), 워크스루(짧은 회의)
- 정적분석 : 자동화된 도구를 이용



*동적 테스트 : 프로그램을 실행하여 테스트를 수행

*화이트박스 테스트 : 구결조다! 변기조 제데루, 내부 구조와 동작을 검사
- 프로그램 내의 모든 명령문을 적어도 한 번 수행
- 결정 포인트 내의 전체 조건식이 적어도 한 번은 참과 거짓의 결과를 수행
- 결정 포인트 내의 각 개별 조건식이 적어도 한 번은 참과 거짓의 결과가 되도록 수행
- 결정 조건 내 모든 개별 조건식의 모든 가능한 조합을 100% 보장
- 개별 조건식이 다른 개별 조건식에 영향을 받지 않고 전체 조건식에 독립적으로 영향을 주도록 함
- 수행 가능한 모든 경로를 테스트, 맥케이브 복잡도 : 간선 수 – 노드 수 + 2
- 전체 조건식 + 개별 조건식
- 프로그램 제어 구조를 그래프 형태로 나타내어 내부 로직 테스트
- 제어 흐름 그래프에 데이터 사용현황 추가
- 프로그램의 반복 구조에 초점을 맞춰 실시하는 테스트




-> 구문(문장) 커버리지(Statement Coverage), 결정(분기) 커버리지(Decision/Branch Coverage), 조건 커버리지(Condition Coverage), 다중 조건 커버리지(Multiple Coverage), 변경 조건/결정 커버리지(Modified Condition/Decision Coverage), 기본 경로 커버리지(Base Path Coverage), 조건/결정 커버리지(Condition/Decision Coverage), 제어 흐름 테스트(Control Flow Testing), 데이터 흐름 테스트(Date Flow Testing), 루프 테스트(Loop Testing)



*블랙박스 테스트 : BC카드는 페어(Pair)로 SUCCEED 했다, 외부 사용자의 요구사항 명세를 보면서 수행
- 최솟값 바로 위, 최대치 바로 아래 등 입력값의 극한 한계를 테스트하는 기법
- SW의 일부 또는 전체를 트리구조로 분석 및 표현하여 테스트 케이스 설계해 테스트
- 테스트 데이터 값들 간에 최소한 한 번씩을 조합하는 방식
- 이벤트에 의해 어느 한 상태에서 다른 상태로 전이되는 경우의 수를 수행하는 테스트
- 프로세스 흐름을 기반으로 테스트케이스를 명세화하여 수행하는 테스트
- 그래프를 활용해 입력 데이터 간의 관계 및 출력에 미치는 영향을 분석
- 여러 버전의 프로그램에 같은 입력값을 넣어 비교해 테스트
- 입력 데이터의 영역을 유사한 도메인별로 유효값/무효값을 그룹핑하여 대푯값 테스트 케이스를 도출하여 테스트
- 테스터의 경험과 직관을 바탕으로 개발자가 범할 수 있는 실수를 추정하여 결함을 테스트
- 요구사항의 논리와 발생조건을 테이블 형태로 나열하여, 조건과 행위를 모두 조합하여 테스트




-> Boundary Value Analysis(경계값 분석 테스트), Classification Tree(분류 트리 테스트), Pairwise(페어와이즈 테스트), State Transition(상태 전이 테스트), Use Case(유스케이스 테스트), Cause-Effect Graph(원인-결과 그래프 테스트), Comparison(비교 테스트), Equivalence Partitioning(동치 분할 테스트), Error Guessing(오류 추정 테스트), Decision Table(결정 테이블 테스트)



*테스트 오라클 : 참샘휴일, 테스트의 결과가 참인지 거짓인지를 판단하기 위해서 사전에 정의된 참값을 입력하여 비교
- 모든 입력값에 대해 기대하는 결과를 생성함으로써 발생된 오류를 모두 검출
- 특정한 몇 개의 입력값에 대해서만 기대하는 결과를 제공
- 샘플링 오라클을 개선하고 나머지 값들에 대해서는 휴리스틱(추정)으로 처리
- 애플리케이션 변경이 있을 때, 수행 전과 후의 결괏값이 동일한지 확인




-> 참(True) 오라클, 샘플링(Sampling) 오라클, 휴리스틱(Heuristic) 오라클, 일관성 검사(Consistent) 오라클



*테스트 레벨 종류 : 단통시인
- 구현이 진행되면서 수행하는 테스트, 모듈 및 컴포넌트 등을 테스트하는 단계
- 모듈 간 인터페이스, 상호작용을 검증하는 테스트 단계
- 단위 시스템 기능이 시스템에서 정상 수행 되는지를 검증하는 테스트, 기능적 /비기능적 요구사항 테스트
- 계약상의 요구사항이 만족되었는지 확인하기 위한 테스트 단계 알파 테스트(개발자 환경), 베타테스트(실제 환경)




-> 단위 테스트, 통합 테스트, 시스템 테스트, 인수 테스트



*소스 코드 품질 분석 도구

정적 분석도구
- 자바 및 타언어 소스 코드에 대한 버그, 데드코드 분석
- C/C++ 코드에 대한 메모리 누수, 오버플로우 등 문제 분석
- 소스 코드 품질 통합 플랫폼, 플러그인 확장가능
- 자바 코드에 대한 코딩 표준 검사 도구
- 다양한 언어의 코드 복잡도 분석 도구, 리눅스, 맥 환경 CLI 형태 지원
- jcoverage 기반의 테스트 커버리지 측정 도구

동적 분석도구
- Valgrind , STP 기반 소프트웨어 에러 및 취약점 동적 분석 도구
- 자동화된 메모리 및 스레드 결함 발견 분석 도구



-> pmd, cppcheck, SonarQube, checkstyle, ccm, cobertura, Avalanche, Vargrind




<11. 응용SW 기초 기술 활용>

*chmod
chmod ugo+rwx test.file
chmod 751 test.file



*연속 메모리 할당 기법(물리 메모리를 분할)

단일 프로그래밍 환경에서의 할당 기법 
- 오버레이, 스와핑

다중 프로그래밍 환경에서의 할당 기법 
- 고정 분할 할당 기법 : 고정 크기로 물리 메모리를 분할하여 프로세스 배치, 내부 단편화 발생
- 가변 분할 할당 기법 : 프로세스 크기에 따라 물리 메모리를 분할하여 프로세스 배치, 외부 단편화 발생, 배치 정책으로 최초 적합, 최적 적합, 최악 적합이 있음



*분산 메모리 할당 기법(프로세스를 분할)
- 페이징 기법 : 가상 메모리의 프로세스를 고정 크기의 페이지 단위로 분할하고 물리 메모리도 같은 크기의 프레임 단위로 분할하여 할당, 내부 단편화 발생
- 세그먼테이션 기법 : 프로세스를 가변적인 크기의 세그먼트 단위로 분할, 외부 단편화 발생
- 페이징/세그먼테이션 혼용 기법 : 내/외부 단편화를 최소로 하기 위해 페이징과 세그먼테이션 혼용, 프로세스를 논리적으로 독립된 세그먼트 단위로 나눈 뒤, 그 세그먼트들을 페이지 단위로 나누어 메모리에 배치



*페이지 교체 알고리즘
FIFO - First In First Out
LRU - Least Recently Used : 가장 오랫동안 사용되지 않은 페이지 교체
LFU - Least Frequently Used : 참조 횟수가 가장 작은 페이지 교체
OPT - Optimal : 앞으로 가장 오랫동안 사용되지 않을 페이지 교체
NUR - Not Used Recently : 최근에 사용하지 않은 페이지 교체



*프로세스 스케줄링 : CPU 자원을 할당받고자 하는 프로세스들 사이의 우선순위를 관리하는 작업
- 선점형 스케줄링 : 하나의 프로세스가 CPU를 차지하고 있을 때, 우선순위가 높은 다른 프로세스가 현재 프로세스를 중단시키고 CPU를 점유하는 스케줄링 방식
- 비선점형 스케줄링 : 한 프로세스가 CPU를 할당 받으면, 작업 종료후 다시 반환되기까지 다른 프로세스가 점유 불가능한 방식



*선점형 스케줄링 알고리즘 : SMMR
- 가장 짧은 시간이 소요되는 프로세스를 먼저 수행하고, 남은 처리시간이 더 짧다고 판단되는 프로세스가 준비 큐에 생기면 언제라도 프로세스가 선점됨
- 여러 개의 큐를 이용하여 상위단계 작업에 의한 하위단계 작업이 선점
- 큐마다 서로 다른 CPU시간 할당량을 부여, FIFO+라운드 로빈 스케줄링 기법 혼합
- 같은 시간을 할당, 시간 내에 작업이 완료되지 않으면 제일 뒤로 이동




-> SRT(Shortest Remaining Time First), 다단계 큐(MLQ; Multi Level Queue), 다단계 피드백 큐(MLFQ; Multi Level Feedback Queue), 라운드 로빈(RR; Round Robin)



*비선점형 스케줄링 알고리즘 : 우기 HFS(홈페밀리서비스)
- 프로세스별 우선순위에 따라 CPU할당
- 작업들이 명시된 기한 내에 완료되도록 계획
- 대기 중인 프로세스 중 현재 응답률이 가장 높은 것을 선택, 기아현상 최소화 기법, 우선순위 = (대기시간+ 서비스시간) / 서비스시간
- 프로세스가 대기 큐에 도착한 순서에 따라 CPU 할당
- 프로세스가 도착하는 시점에 따라 그 당시 가장 작은 서비스 시간을 갖는 프로세스가 종료 시까지 자원 점유, 기아 현상 발생




-> 우선순위(Priority), 기한부(Deadline), HRN(Highest Response Ratio Next), FCFS(=FIFO), SJF(Short Job First)



*프로토콜 기본 3요소 : 구타의




-> 구문, 타이밍, 의미



*OSI 7계층 : 응표세전네데물

7 응용 계층 Application Layer
- 프로토콜: HTTP(80), FTP(21), SSH(22), Telnet(23), SMTP(25), POP3, IMAP 
- 장비 : L7스위치

6 표현 계층 Presentation Layer
- 암호화, 복호화 담당
- 프로토콜 : JPEG, MPEG

5 세션 계층
- 프로세스 간 논리적인 연결 담당
- 프로토콜 : RPC(원격 프로시저 호출), NetBIOS

4 전송 계층 transport layer
- 상위 계층들이 데이터 전달의 유효성이나 효율성을 생각하지 않게 해주면서 종단간의 사용자들에게 신뢰성 있는 데이터를 전달하는 계층
- TCP (신연흐혼): 신뢰성, 연결성, 흐름제어, 혼잡제어
- UDP : 비연결성, 비신뢰성, 순서화되지 않은 데이터그램 서비스 제공
- 전송 단위 : 세그먼트
- 장비 : L4스위치

3 네트워크 계층
- 다양한 길이의 패킷을 네트워크들을 통해 전달하고 전송 계층이 요구하는 서비스 품질을 위한 수단을 제공
- IP : 송수신 간의 패킷 단위, 정보를 주고받는 데 사용하는 통신 프로토콜
- ARP : IP 주소-> MAC 주소
- RARP : MAC 주소-> IP주소
- ICMP: 수신지 도달 불가 메시지를 통지하는 데 사용
- IGMP: 화상회의, IPTV에서 활용되는 프로토콜
- 라우팅 프로토콜 : 데이터 전송을 위해 목적지까지 갈 수 있는 여러 경로 중 최적의 경로를 설정해주는 상호 통신 규약
- 장비 : 라우터, L3 스위치

2 데이터 링크 계층 Data Link Layer
- 링크의 설정, 유지, 종료 담당 및 노드 간의 회선제어, 흐름제어, 오류제어
- HDLC : 점대점 방식이나 다중방식 통신에 사용
- PPP : 두 통신 노드 간의 직접적인 연결
- 전송 단위 : 프레임
- 장비 : 스위치, 브리지

1 물리계층 Physical Layer
- 0과 1의 비트 정보를 회선에 보내기 위한 신호 변환
- 프로토콜 : RS-232
- 전송 단위 : 비트
- 장비 : 허브, 리피터



*IPv4
- 32 비트
- 8비트씩 4부분으로 나뉜 10진수
- 유니캐스트, 멀티캐스트, 브로드캐스트

*IPv6
- 128 비트
- 16비트씩 8부분으로 나뉜 16진수
- 유니캐스트, 멀티캐스트, 애니캐스트



*라우팅 프로토콜(3 네트워크 계층)

내부 라우팅 프로토콜(IGP)
- 거리 벡터 알고리즘 사용 프로토콜(최소 홉) : RIP(15홉 제한)
- 링크 상태 알고리즘 사용 프로토콜(모든 라우터의 상태를 봄) : OSPF(변화가 있을 때만 상태를 주고 받음)

외부 라우팅 프로토콜(EGP)
- 프로토콜에 BGP가 있다



*애드 혹 네트워크(Ad-hoc Network)
- 노드들에 의해 자율적으로 구성되는 기반 구조가 없는 네트워크



*서킷 스위칭
- 네트워크 리소스를 특정 사용 층이 독점하도록 하는 통신 방식



*패킷 스위칭
- 작은 블록의 패킷으로 데이터를 전송하며, 데이터를 전송하는 동안만 네트워크 자원을 사용하도록 하는 통신 방식
- 데이터그램 방식 : 비연결형 교환 방식, 연결 경로를 확립하지 않고 보냄
- 가상 회선 방식 : 연결형 교환 방식, 전송 전에 논리적인 통신 경로를 미리 설정




<12. 소프트웨어 패키징>

*릴리즈 노트 작성 항목
- 헤더 : 문서 이름, 제품 이름, 버전 번호, 릴리즈 날짜, 참고 날짜 등의 정보
- 개요 : 제품 및 변경에 대한 간략한 전반적 개요
- 목적 : 목적에 대한 개요, 버그 수정 및 새로운 기능 기술
- 이슈 요약 : 버그의 간단한 설명 또는 릴리즈 추가 항목 요약
- 재현 항목 : 버그 발견에 따른 재현 단계 기술
- 수정, 개선 내용
- 사용자 영향도 : 버전 변경에 따른 최종 사용자 기준의 기능 및 응용 프로그램상의 영향도 기술
- 소프트웨어 지원 영향도
- 노트 : 소프트웨어 및 하드웨어 설치 항목, 제품, 문서를 포함한 업그레이드 항목 메모
- 면책 조항 : 회사 및 표준 제품과 관련된 메시지, 프리웨어 및 불법 복제 방지, 중복 등 참조에 대한 고지 사항
- 연락 정보





<9. 소프트웨어 개발 보안 구축>

*SW 개발 보안의 3대 요소 : 기무가
- 인가되지 않은 개인 혹은 시스템 접근에 따른 정보 공개 및 노출을 차단하는 특성
- 정당한 방법을 따르지 않고서는 데이터가 변경 될 수 없으며, 데이터의 정확성 및 완전성과 고의/악의로 변경되거나 훼손되지 않음을 보장하는 특성
- 권한을 가진 사용자나 애플리케이션이 원하는 서비스를 지속해서 사용할 수 있도록 보장하는 특성




-> 기밀성(Confidentiality), 무결성(Intergrity), 가용성(Availability)



*DoS 공격 종류
- 서버의 동시 가용 사용자 수를 SYN 패킷만 보내 점유하여 다른 사용자가 서버를 사용하지 못하게 하는 공격
- 대량의 UDP패킷을 만들어 임의의 포트 번호로 전송하여 지속적으로 자원을 고갈시키는 공격
- 출발지 주소를 공격 대상의 IP로 설정하여 네트워크 전체에게 ICMP Echo 패킷을 직접 브로드캐스팅하여 마비시킴
- ICMP 패킷(Ping)을 정상적인 크기보다 아주 크게 만들어서 전송
- 출발지 IP와 목적지 IP를 같은 패킷 주소로 만들어 보내서 수신자가 자기 자신에게 응답을 보내게 함
- IP 패킷의 재조합 과정에서 잘못된 Fragment Offset 정보로 인해 수신 시스템이 문제를 발생하도록 만드는 공격
- 시스템의 패킷 재전송과 재조립이 과부하를 유발하게 하는 공격기법




-> SYN 플러딩(Flooding), UDP 플러딩(Flooding), 스머프(Smurf)/스머핑(Smurfing), 죽음의 핑(PoD; Ping of Death), 랜드어택(Rand Attack), 티어드롭(Tear Drop), 봉크(Bonk)/보잉크(Boink)



*DDoS 공격 도구
- 많은 소스로부터 통합된 UDP flood 서비스 거부 공격을 유발하는데 사용
- 위의 도구와 비슷한 분산 도구, 많은 소스에서 하나 혹은 여러 개의 목표 시스템에 대해 서비스 거부 공격
- 분산 서비스 거부 에이전트 역할




-> Trinoo, TFN(Tribe Flood Network), Stacheldraht



*애플리케이션 공격
- 과도한 GET 메시지를 이용해 웹 서버의 과부하를 유발시키는 공격
- HTTP GET 메서드를 사용해 헤더의 최종 끝을 알리는 개행 문자열을 전송하지 않음
- 요청 헤더의 Content-length를 비정상적으로 크게 설정하고 메시지 바디 부분을 매우 소량을 보내 계속 연결상태 유지시키는 공격(999999 설정 이후 1바이트씩 전송)
- TCP 윈도 크기와 데이터 처리율을 감소시킨 상태에서(Zero Window Packet) 다수 HTTP 패킷을 지속적으로 전송
- 공격자가 공격대상 웹사이트 URL을 지속적으로 변경하면서 다량으로 GET 요청을 발생시키는 서비스 거부 공격
- 조작된 많은 수의 파라미터를 POST방식으로 웹 서버로 전달하여 다수의 해시 충돌 발생시키는 공격




-> HTTP GET Flooding, Slowloris(Slow HTTP Header DoS), RUDY(Slow HTTP POST DoS), Slow HTTP Read DoS, Hulk DoS, Hash DoS



*네트워크 공격
- 직접 공격을 하지 않고 데이터만 몰래 들여다보는 수동적 공격
- 네트워크 하드웨어, 소프트웨어 구성의 취약점을 탐색하는 공격 도구
- 침입자가 인증된 컴퓨팅 시스템인 것처럼 속이기 위해서 본인의 패킷 헤더를 인증된 호스트의 IP로 위조하여 타깃에 전송
- 공격자가 특정 호스트의 MAC 주소를 자신의 MAC 주소로 위조한 ARP Reply를 만들어 특정 호스트의 MAC 정보를 공격자의 MAC정보로 변경
- 스니핑 시스템을 네트워크에 존재하는 또 다른 라우터라고 알림으로써 패킷의 흐름을 바꿈, Redirect 메시지를 공격자가 원하는 형태로 만들어서 공격
- 겉보기에는 정상적인 프로그램으로 보이지만 실행하면 악성 코드를 실행하는 프로그램




-> 스니핑(Sniffing), 네트워크 스캐너(Scanner)/스니퍼(Sniffer), IP 스푸핑, ARP 스푸핑, ICMP Redirect, 트로이 목마



패스워드 크래킹(Password Cracking)
- ID와 패스워드가 될 가능성이 있는 단어를 파일로 만들어 놓음
- 패스워드로 사용될 수 있는 글자를 무작위로 패스워드 자리에 대입
- 사전 + 무차별
- 패스워드 별로 해시 값을 미리 생성해서 역으로 패스워드를 찾음




-> 사전 크래킹(Dictionary), 무차별 크래킹(Brute), 패스워드 하이브리드 공격, 레인보우 테이블 공격



*시스템 보안 공격 기법
- 외부로부터 입력된 값을 검증하지 않고 그대로 사용하는 경우 발생하는 취약점 공격법
- 실행되는 프로세스가 임시파일을 만드는 경우 악의적인 프로그램을 통해 그 프로세스의 실행 중에 끼어들어 임시파일을 심볼릭 링크하는 공격기법
- 사용자의 키보드 움직임을 탐지해서 개인의 중요한 정보를 몰래 빼가는 해킹공격
- 시스템 침입 후 사실을 숨긴 채 차후의 침입을 위해 불법적인 해킹기능을 제공하는 프로그램(트로이 목마, 백도어..)의 모음




-> 포맷 스트링 공격, 레이스 컨디션 공격, 키로거 공격, 루트킷



*기타 보안 용어
- 메일을 이용한 공격
- 문자메시지를 이용한 공격
- QR코드를 이용한 공격
- 특정 타깃을 목표로 하여 다양한 수단을 통해 지속적이고 지능적인 맞춤형 공격기법
- 소프트웨어 개발사의 네트워크에 침투하여 소스 코드를 수정하여 악의적인 코드를 삽입해 공격
- 보안 취약점이 발견되어 널리 공표되기 전에 해당 취약점을 악용하여 공격
- 스스로를 복제하여 네트워크로 전파하는 악성 소프트웨어 컴퓨터 프로그램
- 스스로 실행되지 못하고 해커에 의해 제어, 실행
- 7단계 프로세스별 APT 공격 방어 분석모델
- 몸값을 요구하는 악성 소프트웨어
- 무선 Wifi 피싱기법
- 프로그램 코드의 일부 또는 전체를 변경하여 역공학에 대비
- 크래커가 침입했을 때 알 수 있게 분석하는 도구, 데이터베이스 차이점 체크
- 네트워크 인터페이스를 거치는 패킷의 내용을 출력해주는 프로그램, 모든 패킷 내용 도청할 수 있음




-> 스피어피싱(Spear Phishing), 스미싱(Smishing), 큐싱(Qushing), APT 공격(Advanced Persistent Threat), 공급망 공격(Supply Chain Attack), 제로데이 공격(Zero Day Attack), 웜(Worm), 악성 봇(Malicious Bot), 사이버 킬 체인, 랜섬웨어, 이블 트윈 공격, 난독화(Obfuscation), Tripwire, Tcpdump



*접근 통제 기법 - 3A, 계인권
- 주체의 접근을 추적하고 행동을 기록하는 활동
- 주체의 신원을 검증하기 위한 활동
- 인증된 주체에게 접근을 허용하는 활동




-> 계정관리(Accounting), 인증(Authentication), 권한부여(Authorization)



*서버 접근 통제 유형 : DM RB (키미히 포지션)
- 신분에 근거하여 객체에 대한 접근을 제한하는 방법
- 주체가 갖는 접근 허가 권한에 근거하여 객체에 대한 접근을 제한하는 방법
- 중앙 관리자가 조직 내 맡은 역할에 기초하여 자원에 대한 접근을 제한하는 방법




-> 임의적 접근 통제(DAC), 강제적 접근 통제(MAC), 역할 기반 접근 통제(RBAC)



*접근 통제 보호 모델 : 벨기노라다, 비무노라업
- 미 국방부 지원 모델, 기밀성 강조, No Write Down/No Read Up
- 무결성을 보장하는 최초의 모델, No Write Up/No Read Down




-> 벨-라파둘라 모델, 비바 모델



*대칭키(비공개키) 암호화 알고리즘

블록 암호 방식 : 고정 길이의 블록을 암호화하여 반복하는 알고리즘
- 블록 크기 64bit, 키 길이 56bit인 페이스텔 구조, 미국 연방 표준국(NIST) 암호화 알고리즘
- DES를 대체, 3 DES의 성능문제를 극복하기 위해 개발, 미국 표준 기술 연구소(NIST)
- 한국인터넷진흥원(KISA) 개발
- 경량 환경 및 하드웨어에서의 효율성 향상을 위해 개발, 국가정보원 + 산학연구협회가 개발
- 스위스 연방기술 기관에서 개발
- NSA에서 개발한 Clipper 칩에 내장된 블록 알고리즘

스트림 암호 방식 : 매우 긴 주기의 난수열을 발생시켜 평문과 더불어 암호문을 생성하는 방식
- 선형 되먹임 시프트 레지스터, 레지스터에 입력되는 값이 이전 상태 값들의 선형 함수로 계산되는 구조로 되어 있는 스트림 암호화 알고리즘




-> DES, AES, SEED, ARIA, IDEA, Skipjack, LFSR



*비대칭키(공개키) 암호화 알고리즘
- 최초의 공개키 알고리즘, 이산 대수
- 3명의 MIT 수학교수가 고안, 소인수 분해 수학적 알고리즘
- RSA 암호 방식 대안, 타원 곡선 암호
- 이산대수 계산이 어려운 문제를 기본원리로 함




-> 디피-헬만, RSA, ECC, ElGamal



*해시(일방향) 암호화 알고리즘
- MD4개선, 프로그램이나 파일의 무결성 검사에 사용
- NSA에서 미 정부 표준으로 지정, DSA에서 사용
- 256비트의 해시값을 생성하는 해시함수
- 국내 표준 서명 알고리즘(KCDSA)를 위해 개발된 해시 함수, MD5장점+SHA-1장점
- 메시지 다이제스트를 출력하는 해시 알고리즘




-> MD5, SHA-1, SHA256/384/512, HAS-160, HAVAL




*데이터 암호화 전송 기법
- IP계층에서 무결성과 인증을 보장하는 인증 헤더와 기밀성을 보장하는 암호화를 이용한 IP 보안 프로토콜, 인증, 암호화, 키 관리 프로토콜로 구성
- 전송계층과 응용계층 사이에서 클라이언트와 서버 간의 웹 데이터 암호화, 상호 인증 및 전송 시 데이터 무결성을 보장하는 보안 프로토콜
- 웹 상에서 네트워크 트래픽을 암호화하는 주요 방법, 클라이언트와 서버 간 전송되는 모든 메시지를 각각 암호화해 전송하는 기술




-> IPSec, SSL/TLS, S-HTTP



*데이터 입력을 통한 공격 방법
- 검증되지 않은 외부 입력 데이터가 포함된 웹페이지를 사용자가 열람할 때 부적절한 스크립트가 실행되는 공격
- 사용자가 자신의 의지와는 무관하게 공격자가 의도한 행위를 특정 웹사이트에 요청하게 하는 공격
- 악의적인 SQL 구문을 삽입하고 실행시켜 정보를 열람, 조작할 수 있는 취약점 공격법




-> XSS(Cross Site Script), 사이트 간 요청 위조(CSRF; Cross Site Request Forgery), SQL Injection



*네트워크 보안 솔루션
- 기업 내부, 외부 간 트래픽을 모니터링 하여 시스템의 접근을 허용하거나 차단하는 시스템
- 웹 어플리케이션 보안에 특화된 보안장비, SQL 인젝션, XSS 방어 기능
- 단말기가 내부 네트워크에 접속을 시도할 때 이를 제어하고 통제하는 기능을 제공하는 솔루션
- 네트워크에 발생하는 이벤트를 모니터링하고, 비인가 사용자의 침입을 실시간으로 탐지하는 시스템
- 네트워크에 대한 공격이나 침입을 실시간적으로 차단하고 능동적으로 대응하는 시스템
- 인가되지 않은 무선 단말기의 접속을 자동 탐지 및 차단하고 보안에 취약한 무선 공유기를 탐지
- 다양한 보안 장비의 기능을 하나의 장비로 통합하여 제공하는 시스템
- 인터넷과 같은 공중망에 인증, 암호화, 터널링 기술을 활용해 마치 전용망을 사용하는 효과를 가지는 보안 솔루션
- 다양한 보안 장비로부터 보안 로그와 이벤트 정보를 수집한 후 정보 간의 연관성을 분석하여 위협을 인지하고 신속하게 대응하는 보안 관제 솔루션
- 방화벽, IDS 등 여러 보안 시스템으로부터 발생한 각종 이벤트 및 로그를 통합해서 관리, 분석, 대응하는 전사적 통합 보안 관리 시스템




-> 방화벽, 웹 방화벽, NAC(Network Access Control), IDS(Intrusion Detection System), IPS(Intrusion Prevention System), WIPS(Wireless Intrusion Prevention System) UTM(Unified Threat Management), VPN(Virtual Private Network), SIEM(Security Information and Event Management), ESM(Enterprise Security Management)




*비즈니스 연속성 계획
- 장애나 재해로 인한 운영상의 주요 손실을 볼 것을 가정하여 비즈니스 영향 분석
- 업무중단 시점부터 업무가 복구되어 다시 가동될 때까지의 시간
- 업무중단 시점부터 데이터가 복구되어 다시 정상 가동될 때 데이터의 손실 허용 시점
- 재난으로 장기간에 걸쳐 시설의 운영이 불가능한 경우를 대비한 재난 복구 계획
- 재해 복구 센터




-> BIA(Business Impact Analysis), RTO(Recovery Time Objective), RPO(Recovery Point Objective), DRP(Disaster Recovery Plan), DRS(Disaster Recovery System)



